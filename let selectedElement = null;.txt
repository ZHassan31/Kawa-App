let selectedElement = null;
let x_offset = 0;
let y_offset = 0;
let isCloned = false;

// General function to make an element draggable
function makeDraggable(element) {
  element.addEventListener("mousedown", onMouseDown);
}

function onMouseDown(e) {
  if (this.id === "draggable-image") {
    isCloned = true;
    selectedElement = this.cloneNode(true);
    selectedElement.style.position = "absolute";
    document.body.appendChild(selectedElement);
    makeDraggable(selectedElement);
  } else {
    isCloned = false;
    selectedElement = this;
  }

  x_offset = e.clientX - this.getBoundingClientRect().left;
  y_offset = e.clientY - this.getBoundingClientRect().top;
  selectedElement.classList.add("dragging");
}

// Make the original image draggable
makeDraggable(document.getElementById("draggable-image"));

document.addEventListener("mousemove", function(e) {
  if (selectedElement) {
    const container = document.getElementById("container");
    const containerRect = container.getBoundingClientRect();
    const newX = e.clientX - x_offset;
    const newY = e.clientY - y_offset;

    // Check boundaries if the element is inside the container
    if (selectedElement.parentElement === container) {
      if (newX >= 0 && newX <= containerRect.width - selectedElement.offsetWidth) {
        selectedElement.style.left = `${newX}px`;
      }
      if (newY >= 0 && newY <= containerRect.height - selectedElement.offsetHeight) {
        selectedElement.style.top = `${newY}px`;
      }
    } else {
      selectedElement.style.left = `${newX}px`;
      selectedElement.style.top = `${newY}px`;
    }
  }
});

document.addEventListener("mouseup", function(e) {
  if (selectedElement) {
    const container = document.getElementById("container");
    const containerRect = container.getBoundingClientRect();

    if (isCloned &&
        e.clientX > containerRect.left &&
        e.clientX < containerRect.right &&
        e.clientY > containerRect.top &&
        e.clientY < containerRect.bottom) {

      selectedElement.style.left = `${e.clientX - containerRect.left - x_offset}px`;
      selectedElement.style.top = `${e.clientY - containerRect.top - y_offset}px`;
      container.appendChild(selectedElement);
    } else if (isCloned) {
      document.body.removeChild(selectedElement);
    }

    selectedElement.classList.remove("dragging");
    selectedElement = null;
    isCloned = false;
  }
});



























<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>jQuery UI Draggable - Constrain movement</title>
  <link rel="stylesheet" href="//code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
  <link rel="stylesheet" href="/resources/demos/style.css">
  <style>
  .draggable { width: 90px; height: 90px; padding: 0.5em; float: left; margin: 0 10px 10px 0; }
  #draggable, #draggable2 { margin-bottom:20px; }
  #draggable { cursor: n-resize; }
  #draggable2 { cursor: e-resize; }
  #containment-wrapper { width: 95%; height:150px; border:2px solid #ccc; padding: 10px; }
  h3 { clear: left; }
  </style>
  <script src="https://code.jquery.com/jquery-3.6.0.js"></script>
  <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>
  <script>
  $( function() {
    $( "#draggable" ).draggable({ axis: "y" });
    $( "#draggable2" ).draggable({ axis: "x" });
 
    $( "#draggable3" ).draggable({ containment: "#containment-wrapper", scroll: false });
    $( "#draggable4" ).draggable({ containment: "parent" });
  } );
  </script>
</head>
<body>
 
<!-- <h3>Constrain movement along an axis:</h3>
 
<div id="draggable" class="draggable ui-widget-content">
  <p>I can be dragged only vertically</p>
</div>
 
<div id="draggable2" class="draggable ui-widget-content">
  <p>I can be dragged only horizontally</p>
</div>
 
<h3>Or to within another DOM element:</h3> -->
<div id="containment-wrapper">
  <div id="draggable3" class="draggable ui-widget-content">
    <p>I&apos;m contained within the box</p>
  </div>
 
  <!-- <div class="draggable ui-widget-content">
    <p id="draggable4" class="ui-widget-header">I&apos;m contained within my parent</p>
  </div> -->
</div>
 
 
</body>
</html>